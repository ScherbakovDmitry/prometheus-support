# Deploy configmap-reload to automatically reload Prometheus when its configuration changes.
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: configmap-reload
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      # Used to match pre-existing pods that may be affected during updates.
      run: configmap-reload
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
    type: RollingUpdate
  # Pod template.
  template:
    metadata:
      labels:
        # Note: run=pushgateway-server should match a service config with a
        # public IP and port so that it is publically accessible.
        run: configmap-reload
    spec:
      # Place the pod into the Guaranteed QoS by setting equal resource
      # requests and limits for *all* containers in the pod.
      # For more background, see:
      # https://github.com/kubernetes/community/blob/master/contributors/design-proposals/resource-qos.md
      containers:
      # Check https://hub.docker.com/r/jimmidyson/configmap-reload/tags/ for the current
      # stable version.
      - image: jimmidyson/configmap-reload:v0.2.2
        name: configmap-reload
        volumeMounts:
        # Mount the prometheus config volume so we can watch it for changes.
        - mountPath: /prometheus-config
          name: prometheus-config
        env:
        - name: PROM_RELOAD_URL
          valueFrom:
            secretKeyRef:
              name: configmap-reload
              key: prom_reload_url
        resources:
          requests:
            memory: "400Mi"
            cpu: "200m"
          limits:
            memory: "400Mi"
            cpu: "200m"
        args: ["-webhook-url", "$(PROM_RELOAD_URL)", "-volume-dir", "/prometheus-config"]
      # Create a volume from the configmap
      volumes:
      - name: prometheus-config
        configMap:
          name: prometheus-federation-config
